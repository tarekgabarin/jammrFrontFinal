

                        <Field name="form_skills" component={({input, meta}) => {

                            return (

                                <div>

                                    <ul>

                                        <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Acting" type="checkbox" {...input}/>
                                                Acting
                                            </label>
                                        </li>

                                        <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Drawing" type="checkbox" {...input}/>
                                                Drawing
                                            </label>

                                        </li>


                                        <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Music" type="checkbox" {...input}/>
                                                Music
                                            </label>

                                        </li>


                                        <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Writing" type="checkbox" {...input}/>
                                                Writing
                                            </label>

                                        </li>


                                        <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Programming" type="checkbox" {...input}/>
                                                Programming
                                            </label>

                                        </li>


                                        <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Videography" type="checkbox" {...input}/>
                                                Videography
                                            </label>


                                        </li>


                                    </ul>

                                    {meta.touched && meta.error &&
                                    <p className="help form-warning">{meta.error}</p>}


                                </div>

                            )

                        }}/>



 <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Music" type="checkbox" {...input}/>
                                                Music
                                            </label>
                                        </li>

                                        <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Game" type="checkbox" {...input}/>
                                                Game
                                            </label>

                                        </li>


                                        <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Film" type="checkbox" {...input}/>
                                                Film
                                            </label>

                                        </li>


                                        <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Graphic Novel" type="checkbox" {...input}/>
                                                Graphic Novel
                                            </label>

                                        </li>


                                        <li className="margin-list-item">
                                            <label className="checkbox">
                                                <input value="Youtube Channel" type="checkbox" {...input}/>
                                                Youtube Channel
                                            </label>

                                        </li>



                                        //// failed attempt


                                        function validate2(values){

                                            const errorObj = {};

                                            function validateRest(errors){

                                                if (!values.form_first_name) {

                                                    errors.form_first_name = 'Field is empty'

                                                }

                                                if (!values.form_last_name) {

                                                    errors.form_last_name = 'Field is empty'

                                                }

                                                if (!values.form_gender) {


                                                    errors.form_gender = 'Please select a gender'

                                                }

                                                if (!values.form_email) {

                                                    errors.form_email = 'Field is empty'

                                                }

                                                if (!values.form_password) {

                                                    errors.form_password = "Field is empty"

                                                }

                                                if (!values.form_address) {

                                                    errors.form_address = "Field is empty"

                                                }

                                                if (!values.form_city) {

                                                    errors.form_city = "Field is empty"
                                                }

                                                if (values.form_email) {

                                                    if (verifyEmail(values.form_email) === false) {


                                                        errors.form_address = "Please provide a real email"

                                                    }


                                                }

                                                if (values.form_skills) {


                                                    let arr = getArrayCheckBox(values.form_skills);

                                                    console.log('arr.length is...' + arr.length);

                                                    if (arr.length === 0) {


                                                        errors.form_skills_warning = "Please select at least one value";

                                                        console.log("form_skills_warning is..." + values.form_skills_warning)

                                                    }


                                                }

                                                if (values.form_arts) {

                                                    let arr = getArrayCheckBox(values.form_arts);

                                                    if (arr.length === 0) {

                                                        errors.form_arts_warning = "Please select at least one value"

                                                    }

                                                }


                                                return errors


                                            }

                                            if (values.form_province && values.form_address && values.form_city) {

                                                let inputAddress = formatStrings(values.form_address);

                                                let inputCity = formatStrings(values.form_city);

                                                let inputProvince = formatStrings(values.form_province);

                                                const apiString = `https://maps.googleapis.com/maps/api/geocode/json?address=+${inputAddress}, +${inputCity}, +${inputProvince}, +CA&key=AIzaSyCZGDHMtmb2WAoZG1VukVSumsjz9kNGJOw`;

                                                axios.get(apiString)

                                                    .then(response => {

                                                        console.log(response);

                                                        if (response.data["status"] === 'ZERO_RESULTS') {

                                                            errorObj.form_address = "Please input a real Canadian address";

                                                            validateRest(errorObj)



                                                        }
                                                        else if (response.data["status"] === "OK") {

                                                            validateRest(errorObj)

                                                        }


                                                    })


                                                    .catch(err => {

                                                        if (err) throw err;

                                                    })

                                            }
                                            else {

                                                return validateRest(errorObj)

                                            }



                                        }





/// Another failed attempt

function validate2(values){

    const errors = {};

    let validatePromise = (errorsObj, valuesObj) => {


        return new Promise((resolve, reject) => {

            let inputAddress = formatStrings(valuesObj.form_address);

            let inputCity = formatStrings(valuesObj.form_city);

            let inputProvince = formatStrings(valuesObj.form_province);

            const apiString = `https://maps.googleapis.com/maps/api/geocode/json?address=+${inputAddress}, +${inputCity}, +${inputProvince}, +CA&key=AIzaSyCZGDHMtmb2WAoZG1VukVSumsjz9kNGJOw`;

            axios.get(apiString)

                .then(response => {

                    console.log(response);

                    if (response.data["status"] === 'OK') {

                        resolve(errorsObj)

                    }
                    else if (response.data["status"] === 'ZERO_RESULTS') {

                        errorsObj.form_address = 'Please input a real Canadian province';

                        resolve(errorsObj)
                    }


                })


                .catch(err => {

                    if (err) throw err;

                })




        })


    };

    validatePromise(errors, values).then(errors => {

        console.log(errors);

        console.log(values);

        if (!values.form_first_name) {

            errors.form_first_name = 'Field is empty'

        }

        if (!values.form_last_name) {

            errors.form_last_name = 'Field is empty'

        }

        if (!values.form_gender) {


            errors.form_gender = 'Please select a gender'

        }

        if (!values.form_email) {

            errors.form_email = 'Field is empty'

        }

        if (!values.form_password) {

            errors.form_password = "Field is empty"

        }

        if (!values.form_address) {

            errors.form_address = "Field is empty"

        }

        if (!values.form_city) {

            errors.form_city = "Field is empty"
        }


        if (values.form_gender) {

            console.log(values)

        }

        if (values.form_province) {

            console.log(values.form_province)

        }

        if (values.form_email) {

            if (verifyEmail(values.form_email) === false) {


                errors.form_address = "Please provide a real email"

            }


        }

        if (values.form_skills) {


            let arr = getArrayCheckBox(values.form_skills);

            console.log('arr.length is...' + arr.length);

            if (arr.length === 0) {


                errors.form_skills_warning = "Please select at least one value";

                console.log("form_skills_warning is..." + values.form_skills_warning)

            }


        }

        if (values.form_arts) {

            let arr = getArrayCheckBox(values.form_arts);

            if (arr.length === 0) {

                errors.form_arts_warning = "Please select at least one value"

            }

        }

        return errors





    });

}






from inside validate()



    if (values.form_province && values.form_address && values.form_city) {

        let inputAddress = formatStrings(values.form_address);

        let inputCity = formatStrings(values.form_city);

        let inputProvince = formatStrings(values.form_province);

        const apiString = `https://maps.googleapis.com/maps/api/geocode/json?address=+${inputAddress}, +${inputCity}, +${inputProvince}, +CA&key=AIzaSyCZGDHMtmb2WAoZG1VukVSumsjz9kNGJOw`;

        axios.get(apiString)

            .then(response => {

                console.log(response);

                if (response.data["status"] === 'ZERO_RESULTS') {

                    errors.form_address = "Please input a real Canadian address"

                }
                else {

                }


            })


            .catch(err => {

                if (err) throw err;

            })

    }
    else {

        return errors

    }